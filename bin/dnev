#!/usr/bin/env python3

import curses
from datetime import datetime
import os
import sys
import locale
import logging

from dnevnichok.commands import Executor
from dnevnichok.config import Config, setup_logging
from dnevnichok.core import NoteItem
from dnevnichok.events import event_hub
from dnevnichok.managers import ManagerHub
from dnevnichok.populate import repopulate_db
from dnevnichok.ui import MainWindow

locale.setlocale(locale.LC_ALL, '')
code = locale.getpreferredencoding()
config = Config()

try:
    import colored_traceback
    colored_traceback.add_hook()
except ImportError:
    pass


class App:
    """ App manages main window, managers, process events from underlying UI"""
    def __init__(self, stdscr):
        dbpath = config.get_path('db')
        notespath = config.get_path('notes')
        os.chdir(notespath)
        if not os.path.exists(dbpath):
            repopulate_db()

        self.executor = Executor(self)
        self.manager_hub = ManagerHub()
        items = self.manager_hub.get_items()
        self.window = MainWindow(stdscr)
        self.window.show_items(items)
        self.keystack = []   # for gg (move to first element) and numerical

        event_hub.register('key-press', self.process_keypress)
        event_hub.register('exit', self.exit)

        self._running = False
        self.run_forever()

    def run_forever(self):
        self._running = True
        while self._running:
            try:
                c = self.window.stdscr.get_wch()
            except KeyboardInterrupt:
                event_hub.trigger(('exit',))
            else:
                self.window.clear_bar()
                event_hub.trigger(('key-press', c))

    def process_keypress(self, c):
        if type(c) is not str:
            return

        def filter_items(search_query: str):
            all_items = self.manager_hub.active.get_items()
            def f(item):
                if any(c.isupper() for c in search_query):   # case-sensitive
                    if item.title.find(search_query) > -1              or \
                        isinstance(item, NoteItem)                    and \
                        (item.full_path.split('/')[-1].find(search_query) > -1 or
                        item.get_content().find(search_query) > -1):
                        return True
                else:
                    if item.title.lower().find(search_query) > -1       or \
                        isinstance(item, NoteItem)                     and \
                        (item.full_path.split('/')[-1].lower().find(search_query) > -1 or
                        item.get_content().lower().find(search_query) > -1):
                        return True
                return False
            return [item for item in all_items if f(item)]

        if not self.keystack:
            if c in 'QqЙй': self.executor.run_command('quit')
            elif c in 'Rr':
                repopulate_db()
                event_hub.trigger(('reload',))
            elif c in '/':
                query = self.window.input('/')
                if not query:
                    event_hub.trigger(('print', 'You have to enter search query'))
                else:
                    items = filter_items(query)
                    if items:
                        event_hub.trigger(('show', items))
                    else:
                        event_hub.trigger(('print', 'Nothing matches query'))
            elif c in ':':
                command = self.window.input(':')
                self.executor.run_command(command)
            elif c in 'gп' or c.isnumeric():
                self.keystack.append(c)
            elif c in 'NТ':
                date = datetime.today().strftime("%d-%m-%Y")
                self.executor.run_command('new diary_{}.rst diary'.format(date))
            elif c in 'DВ':
                self.executor.run_command('delete')
            elif c in 'uг':
                self.executor.run_command('update')
            elif c in 'c':
                self.executor.run_command('commit')
            elif self.manager_hub.tied_to_manager(c):
                self.manager_hub.switch_by_key(c)
        else:
            if c in 'gп':
                if self.keystack[0] in 'gп':
                    self.window.left_pane.move_to(0)
                if self.keystack[-1].isnumeric():
                    elem_num = ''.join(self.keystack)
                    self.window.left_pane.move_to(int(elem_num)-1)
            if c.isnumeric():
                self.keystack.append(c)
            else:
                self.keystack = []

    def exit(self):
        self._running = False


if __name__ == '__main__':
    setup_logging()
    logger = logging.getLogger(__name__)
    curses.wrapper(App)
    logger.info("Closing dnevnichok. See you later.")
    sys.exit(0)
